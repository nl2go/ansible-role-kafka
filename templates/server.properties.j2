# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id={{ kafka_broker_id }}
{% if kafka_rack_name is defined %}
broker.rack={{ kafka_rack_name }}
{% endif %}
############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092
{% if kafka_listeners is defined %}
listeners={{ kafka_listeners }}
{% endif %}

# Kafka brokers communicate between themselves, usually on the internal network. To define which listener to use, The host/IP used must be accessible from the broker machine to others.
{% if kafka_inter_broker_listener_name is defined %}
inter.broker.listener.name={{ kafka_inter_broker_listener_name }}
{% endif %}

# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092
{% if kafka_advertised_listeners is defined %}
advertised.listeners={{ kafka_advertised_listeners }}
{% endif %}

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
{% if kafka_listener_security_protocol_map is defined %}
listener.security.protocol.map={{ kafka_listener_security_protocol_map }}
{% endif %}

# Additional security and sasl related settings
{% if kafka_security_inter_broker_protocol is defined %}
security.inter.broker.protocol={{ kafka_security_inter_broker_protocol }}
{% endif %}

{% if kafka_sasl_mechanism_inter_broker_protocol is defined %}
sasl.mechanism.inter.broker.protocol={{ kafka_sasl_mechanism_inter_broker_protocol }}
{% endif %}

{% if kafka_sasl_enabled_mechanisms is defined %}
sasl.enabled.mechanisms={{ kafka_sasl_enabled_mechanisms }}
{% endif %}

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads={{ kafka_num_network_threads }}

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads={{ kafka_num_io_threads }}

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes={{ kafka_socket_send_buffer_bytes }}

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes={{ kafka_socket_receive_buffer_bytes }}

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes={{ kafka_socket_request_max_bytes }}

# The largest size of the message that can be received by the broker from a producer.
message.max.bytes={{ kafka_message_max_bytes }}

############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs={{ kafka_data_dir }}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions={{ kafka_num_partitions }}

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir={{ kafka_num_recovery_threads_per_data_dir }}

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3.
offsets.topic.replication.factor={{ kafka_offsets_topic_replication_factor }}
transaction.state.log.replication.factor={{ kafka_transaction_state_log_replication_factor }}
transaction.state.log.min.isr={{ kafka_transaction_state_log_min_isr }}

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours={{ kafka_log_retention_hours }}

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes={{ kafka_log_retention_bytes }}

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes={{ kafka_log_segment_bytes }}

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms={{ kafka_log_retention_check_interval_ms }}

# After a consumer group loses all its consumers (i.e. becomes empty) its
# offsets will be kept for this retention period before getting discarded. For
# standalone consumers (using manual assignment), offsets will be expired after
# the time of last commit plus this retention period.
offsets.retention.minutes={{ kafka_offset_retention_minutes }}

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect={{ kafka_zookeeper_connection_hosts | join(',') }}

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms={{ kafka_zookeeper_connection_timeout_ms }}


############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms={{ kafka_group_initial_rebalance_delay_ms }}
